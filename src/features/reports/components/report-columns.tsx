'use client'

import { type ColumnDef } from '@tanstack/react-table'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { MoreHorizontalIcon, DownloadIcon, TrashIcon, FileTextIcon } from 'lucide-react'
import type { ReportResult } from '../types/reports'
import { cn } from '@/lib/utils'

const getFormatBadgeClass = (format: string) => {
  const formatClasses = {
    pdf: 'bg-red-100 text-red-700',
    excel: 'bg-green-100 text-green-700',
    csv: 'bg-blue-100 text-blue-700',
    json: 'bg-purple-100 text-purple-700'
  } as const

  return formatClasses[format as keyof typeof formatClasses] || 'bg-muted'
}

type ReportColumnsProps = {
  onDownload: (report: ReportResult) => void
  onDelete: (report: ReportResult) => void
}

export const getReportColumns = ({ onDownload, onDelete }: ReportColumnsProps): ColumnDef<ReportResult>[] => [
  {
    accessorKey: 'title',
    header: 'Report Title',
    cell: ({ row }) => {
      const report = row.original
      return (
        <div className="flex items-center space-x-3">
          <div className="w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center">
            <FileTextIcon className="w-5 h-5 text-primary" />
          </div>
          <div>
            <div className="font-medium">{report.title}</div>
            <div className="text-sm text-muted-foreground">ID: {report.reportId.slice(0, 8)}...</div>
          </div>
        </div>
      )
    },
  },
  {
    accessorKey: 'format',
    header: 'Format',
    cell: ({ row }) => {
      const format = row.original.format
      return (
        <Badge variant="outline" className={cn('font-medium uppercase', getFormatBadgeClass(format))}>
          {format}
        </Badge>
      )
    },
  },
  {
    accessorKey: 'generatedBy',
    header: 'Generated By',
  },
  {
    accessorKey: 'generatedAt',
    header: 'Generated At',
    cell: ({ row }) => {
      const date = new Date(row.original.generatedAt)
      return (
        <div>
          <div>{date.toLocaleDateString()}</div>
          <div className="text-sm text-muted-foreground">{date.toLocaleTimeString()}</div>
        </div>
      )
    },
  },
  {
    id: 'actions',
    cell: ({ row }) => {
      const report = row.original

      return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="icon">
              <MoreHorizontalIcon className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Actions</DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuItem onClick={() => onDownload(report)}>
              <DownloadIcon className="mr-2 h-4 w-4" />
              Download
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem
              onClick={() => onDelete(report)}
              className="text-destructive focus:text-destructive"
            >
              <TrashIcon className="mr-2 h-4 w-4" />
              Delete
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      )
    },
  },
]